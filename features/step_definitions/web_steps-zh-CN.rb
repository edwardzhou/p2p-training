# encoding: utf-8
# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))

#module WithinHelpers
#  def with_scope(locator)
#    locator ? within(locator) { yield } : yield
#  end
#end
#World(WithinHelpers)

Given /^我位于(.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^我打开(.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|我)(?:在\<([^\>]*)\>里面)?按下按钮\s*"([^\"]*)"$/ do |selector, button|
  with_scope(selector) do
    click_button(button)
  end
end

When /^我点击链接"([^\"]*)"$/ do |link|
  click_link(link)
end

When /^我在"([^\"]*)"里面点击链接"([^\"]*)"$/ do |parent, link|
  click_link_within(parent, link)
end

When /^我点击"([^\"]*)"的链接"([^\"]*)"$/ do |title, link|
  pending
end

When /^我在"([^\"]*)"填入"([^\"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^我填入"([^\"]*)"给"([^\"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^我填入下列:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{我在"#{name}"填入"#{value}"}
  end
end

When /^我从"([^\"]*)"选取"([^\"]*)"$/ do |field, value|
  select(value, :from => field)
end

# Use this step in conjunction with Rail's datetime_select helper. For example:
# When I select "December 25, 2008 10:00" as the date and time
When /^我选取"([^\"]*)"为日期时间$/ do |time|
  select_datetime(time)
end

# Use this step when using multiple datetime_select helpers on a page or
# you want to specify which datetime to select. Given the following view:
#   <%= f.label :preferred %><br />
#   <%= f.datetime_select :preferred %>
#   <%= f.label :alternative %><br />
#   <%= f.datetime_select :alternative %>
# The following steps would fill out the form:
# When I select "November 23, 2004 11:20" as the "Preferred" date and time
# And I select "November 25, 2004 10:30" as the "Alternative" date and time
When /^我选取"([^\"]*)"作为"([^\"]*)"的日期时间$/ do |datetime, datetime_label|
  select_datetime(datetime, :from => datetime_label)
end

# Use this step in conjunction with Rail's time_select helper. For example:
# When I select "2:20PM" as the time
# Note: Rail's default time helper provides 24-hour time-- not 12 hour time. Webrat
# will convert the 2:20PM to 14:20 and then select it.
When /^我选取"([^\"]*)"作为时间$/ do |time|
  select_time(time)
end

# Use this step when using multiple time_select helpers on a page or you want to
# specify the name of the time on the form.  For example:
# When I select "7:30AM" as the "Gym" time
When /^我选取"([^\"]*)"作为"([^\"]*)"的时间$/ do |time, time_label|
  select_time(time, :from => time_label)
end

# Use this step in conjunction with Rail's date_select helper.  For example:
# When I select "February 20, 1981" as the date
When /^我选取"([^\"]*)"作为日期$/ do |date|
  select_date(date)
end

# Use this step when using multiple date_select helpers on one page or
# you want to specify the name of the date on the form. For example:
# When I select "April 26, 1982" as the "Date of Birth" date
When /^我选取"([^\"]*)"作为"([^\"]*)"的日期$/ do |date, date_label|
  select_date(date, :from => date_label)
end

When /^我勾上"([^\"]*)"$/ do |field|
  check(field)
end

When /^我取消勾上"([^\"]*)"$/ do |field|
  uncheck(field)
end

When /^我选择"([^\"]*)"$/ do |field|
  choose(field)
end

When /^我附加文件"([^\"]*)"给"([^\"]*)"$/ do |path, field|
  attach_file(field, path)
end

Then /^(?:|我)应当见到\s*"([^\"]*)"$/ do |text|
  with_scope(nil) do
    if page.respond_to? :should
      page.should have_content(text)
    else
      assert page.has_content?(text)
    end
  end
end

Then /^我应当见到\/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  response.should contain(regexp)
end

Then /^我不应当见到"([^\"]*)"$/ do |text|
  response.should_not contain(text)
end

Then /^我不应当见到\/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  response.should_not contain(regexp)
end

Then /^字段"([^\"]*)"应当包含"([^\"]*)"$/ do |field, value|
  field_labeled(field).value.should =~ /#{value}/
end

Then /^字段"([^\"]*)"应当不包含"([^\"]*)"$/ do |field, value|
  field_labeled(field).value.should_not =~ /#{value}/
end

Then /^复选框"([^\"]*)"应当是勾上的$/ do |label|
  field_labeled(label).should be_checked
end

Then /^复选框"([^\"]*)"应当不是勾上的$/ do |label|
  field_labeled(label).should_not be_checked
end

Then /^我应当在页面(.+)$/ do |page_name|
  URI.parse(current_url).path.should == path_to(page_name)
end

Then /^显示页面$/ do
  save_and_open_page
end
